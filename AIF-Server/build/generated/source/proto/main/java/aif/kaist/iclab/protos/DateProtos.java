// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: date.proto

package aif.kaist.iclab.protos;

public final class DateProtos {
  private DateProtos() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  public interface DateTimeOrBuilder extends
      // @@protoc_insertion_point(interface_extends:aif.kaist.DateTime)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * UTC Offset in minutes (e.g., 540 in Asia/Seoul; +09:00)
     * </pre>
     *
     * <code>int32 utc_offset_min = 1;</code>
     */
    int getUtcOffsetMin();

    /**
     * <code>int32 year = 2;</code>
     */
    int getYear();

    /**
     * <code>int32 month = 3;</code>
     */
    int getMonth();

    /**
     * <code>int32 day = 4;</code>
     */
    int getDay();

    /**
     * <code>int32 hour = 5;</code>
     */
    int getHour();

    /**
     * <code>int32 minute = 6;</code>
     */
    int getMinute();

    /**
     * <code>int32 second = 7;</code>
     */
    int getSecond();

    /**
     * <code>int32 millisecond = 8;</code>
     */
    int getMillisecond();

    /**
     * <code>bool date_only = 9;</code>
     */
    boolean getDateOnly();
  }
  /**
   * Protobuf type {@code aif.kaist.DateTime}
   */
  public  static final class DateTime extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:aif.kaist.DateTime)
      DateTimeOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use DateTime.newBuilder() to construct.
    private DateTime(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private DateTime() {
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private DateTime(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 8: {

              utcOffsetMin_ = input.readInt32();
              break;
            }
            case 16: {

              year_ = input.readInt32();
              break;
            }
            case 24: {

              month_ = input.readInt32();
              break;
            }
            case 32: {

              day_ = input.readInt32();
              break;
            }
            case 40: {

              hour_ = input.readInt32();
              break;
            }
            case 48: {

              minute_ = input.readInt32();
              break;
            }
            case 56: {

              second_ = input.readInt32();
              break;
            }
            case 64: {

              millisecond_ = input.readInt32();
              break;
            }
            case 72: {

              dateOnly_ = input.readBool();
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return aif.kaist.iclab.protos.DateProtos.internal_static_aif_kaist_DateTime_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return aif.kaist.iclab.protos.DateProtos.internal_static_aif_kaist_DateTime_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              aif.kaist.iclab.protos.DateProtos.DateTime.class, aif.kaist.iclab.protos.DateProtos.DateTime.Builder.class);
    }

    public static final int UTC_OFFSET_MIN_FIELD_NUMBER = 1;
    private int utcOffsetMin_;
    /**
     * <pre>
     * UTC Offset in minutes (e.g., 540 in Asia/Seoul; +09:00)
     * </pre>
     *
     * <code>int32 utc_offset_min = 1;</code>
     */
    public int getUtcOffsetMin() {
      return utcOffsetMin_;
    }

    public static final int YEAR_FIELD_NUMBER = 2;
    private int year_;
    /**
     * <code>int32 year = 2;</code>
     */
    public int getYear() {
      return year_;
    }

    public static final int MONTH_FIELD_NUMBER = 3;
    private int month_;
    /**
     * <code>int32 month = 3;</code>
     */
    public int getMonth() {
      return month_;
    }

    public static final int DAY_FIELD_NUMBER = 4;
    private int day_;
    /**
     * <code>int32 day = 4;</code>
     */
    public int getDay() {
      return day_;
    }

    public static final int HOUR_FIELD_NUMBER = 5;
    private int hour_;
    /**
     * <code>int32 hour = 5;</code>
     */
    public int getHour() {
      return hour_;
    }

    public static final int MINUTE_FIELD_NUMBER = 6;
    private int minute_;
    /**
     * <code>int32 minute = 6;</code>
     */
    public int getMinute() {
      return minute_;
    }

    public static final int SECOND_FIELD_NUMBER = 7;
    private int second_;
    /**
     * <code>int32 second = 7;</code>
     */
    public int getSecond() {
      return second_;
    }

    public static final int MILLISECOND_FIELD_NUMBER = 8;
    private int millisecond_;
    /**
     * <code>int32 millisecond = 8;</code>
     */
    public int getMillisecond() {
      return millisecond_;
    }

    public static final int DATE_ONLY_FIELD_NUMBER = 9;
    private boolean dateOnly_;
    /**
     * <code>bool date_only = 9;</code>
     */
    public boolean getDateOnly() {
      return dateOnly_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (utcOffsetMin_ != 0) {
        output.writeInt32(1, utcOffsetMin_);
      }
      if (year_ != 0) {
        output.writeInt32(2, year_);
      }
      if (month_ != 0) {
        output.writeInt32(3, month_);
      }
      if (day_ != 0) {
        output.writeInt32(4, day_);
      }
      if (hour_ != 0) {
        output.writeInt32(5, hour_);
      }
      if (minute_ != 0) {
        output.writeInt32(6, minute_);
      }
      if (second_ != 0) {
        output.writeInt32(7, second_);
      }
      if (millisecond_ != 0) {
        output.writeInt32(8, millisecond_);
      }
      if (dateOnly_ != false) {
        output.writeBool(9, dateOnly_);
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (utcOffsetMin_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, utcOffsetMin_);
      }
      if (year_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, year_);
      }
      if (month_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(3, month_);
      }
      if (day_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(4, day_);
      }
      if (hour_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(5, hour_);
      }
      if (minute_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(6, minute_);
      }
      if (second_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(7, second_);
      }
      if (millisecond_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(8, millisecond_);
      }
      if (dateOnly_ != false) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(9, dateOnly_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof aif.kaist.iclab.protos.DateProtos.DateTime)) {
        return super.equals(obj);
      }
      aif.kaist.iclab.protos.DateProtos.DateTime other = (aif.kaist.iclab.protos.DateProtos.DateTime) obj;

      if (getUtcOffsetMin()
          != other.getUtcOffsetMin()) return false;
      if (getYear()
          != other.getYear()) return false;
      if (getMonth()
          != other.getMonth()) return false;
      if (getDay()
          != other.getDay()) return false;
      if (getHour()
          != other.getHour()) return false;
      if (getMinute()
          != other.getMinute()) return false;
      if (getSecond()
          != other.getSecond()) return false;
      if (getMillisecond()
          != other.getMillisecond()) return false;
      if (getDateOnly()
          != other.getDateOnly()) return false;
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + UTC_OFFSET_MIN_FIELD_NUMBER;
      hash = (53 * hash) + getUtcOffsetMin();
      hash = (37 * hash) + YEAR_FIELD_NUMBER;
      hash = (53 * hash) + getYear();
      hash = (37 * hash) + MONTH_FIELD_NUMBER;
      hash = (53 * hash) + getMonth();
      hash = (37 * hash) + DAY_FIELD_NUMBER;
      hash = (53 * hash) + getDay();
      hash = (37 * hash) + HOUR_FIELD_NUMBER;
      hash = (53 * hash) + getHour();
      hash = (37 * hash) + MINUTE_FIELD_NUMBER;
      hash = (53 * hash) + getMinute();
      hash = (37 * hash) + SECOND_FIELD_NUMBER;
      hash = (53 * hash) + getSecond();
      hash = (37 * hash) + MILLISECOND_FIELD_NUMBER;
      hash = (53 * hash) + getMillisecond();
      hash = (37 * hash) + DATE_ONLY_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
          getDateOnly());
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static aif.kaist.iclab.protos.DateProtos.DateTime parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static aif.kaist.iclab.protos.DateProtos.DateTime parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static aif.kaist.iclab.protos.DateProtos.DateTime parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static aif.kaist.iclab.protos.DateProtos.DateTime parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static aif.kaist.iclab.protos.DateProtos.DateTime parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static aif.kaist.iclab.protos.DateProtos.DateTime parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static aif.kaist.iclab.protos.DateProtos.DateTime parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static aif.kaist.iclab.protos.DateProtos.DateTime parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static aif.kaist.iclab.protos.DateProtos.DateTime parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static aif.kaist.iclab.protos.DateProtos.DateTime parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static aif.kaist.iclab.protos.DateProtos.DateTime parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static aif.kaist.iclab.protos.DateProtos.DateTime parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(aif.kaist.iclab.protos.DateProtos.DateTime prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code aif.kaist.DateTime}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:aif.kaist.DateTime)
        aif.kaist.iclab.protos.DateProtos.DateTimeOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return aif.kaist.iclab.protos.DateProtos.internal_static_aif_kaist_DateTime_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return aif.kaist.iclab.protos.DateProtos.internal_static_aif_kaist_DateTime_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                aif.kaist.iclab.protos.DateProtos.DateTime.class, aif.kaist.iclab.protos.DateProtos.DateTime.Builder.class);
      }

      // Construct using aif.kaist.iclab.protos.DateProtos.DateTime.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        utcOffsetMin_ = 0;

        year_ = 0;

        month_ = 0;

        day_ = 0;

        hour_ = 0;

        minute_ = 0;

        second_ = 0;

        millisecond_ = 0;

        dateOnly_ = false;

        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return aif.kaist.iclab.protos.DateProtos.internal_static_aif_kaist_DateTime_descriptor;
      }

      @java.lang.Override
      public aif.kaist.iclab.protos.DateProtos.DateTime getDefaultInstanceForType() {
        return aif.kaist.iclab.protos.DateProtos.DateTime.getDefaultInstance();
      }

      @java.lang.Override
      public aif.kaist.iclab.protos.DateProtos.DateTime build() {
        aif.kaist.iclab.protos.DateProtos.DateTime result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public aif.kaist.iclab.protos.DateProtos.DateTime buildPartial() {
        aif.kaist.iclab.protos.DateProtos.DateTime result = new aif.kaist.iclab.protos.DateProtos.DateTime(this);
        result.utcOffsetMin_ = utcOffsetMin_;
        result.year_ = year_;
        result.month_ = month_;
        result.day_ = day_;
        result.hour_ = hour_;
        result.minute_ = minute_;
        result.second_ = second_;
        result.millisecond_ = millisecond_;
        result.dateOnly_ = dateOnly_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof aif.kaist.iclab.protos.DateProtos.DateTime) {
          return mergeFrom((aif.kaist.iclab.protos.DateProtos.DateTime)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(aif.kaist.iclab.protos.DateProtos.DateTime other) {
        if (other == aif.kaist.iclab.protos.DateProtos.DateTime.getDefaultInstance()) return this;
        if (other.getUtcOffsetMin() != 0) {
          setUtcOffsetMin(other.getUtcOffsetMin());
        }
        if (other.getYear() != 0) {
          setYear(other.getYear());
        }
        if (other.getMonth() != 0) {
          setMonth(other.getMonth());
        }
        if (other.getDay() != 0) {
          setDay(other.getDay());
        }
        if (other.getHour() != 0) {
          setHour(other.getHour());
        }
        if (other.getMinute() != 0) {
          setMinute(other.getMinute());
        }
        if (other.getSecond() != 0) {
          setSecond(other.getSecond());
        }
        if (other.getMillisecond() != 0) {
          setMillisecond(other.getMillisecond());
        }
        if (other.getDateOnly() != false) {
          setDateOnly(other.getDateOnly());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        aif.kaist.iclab.protos.DateProtos.DateTime parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (aif.kaist.iclab.protos.DateProtos.DateTime) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private int utcOffsetMin_ ;
      /**
       * <pre>
       * UTC Offset in minutes (e.g., 540 in Asia/Seoul; +09:00)
       * </pre>
       *
       * <code>int32 utc_offset_min = 1;</code>
       */
      public int getUtcOffsetMin() {
        return utcOffsetMin_;
      }
      /**
       * <pre>
       * UTC Offset in minutes (e.g., 540 in Asia/Seoul; +09:00)
       * </pre>
       *
       * <code>int32 utc_offset_min = 1;</code>
       */
      public Builder setUtcOffsetMin(int value) {
        
        utcOffsetMin_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * UTC Offset in minutes (e.g., 540 in Asia/Seoul; +09:00)
       * </pre>
       *
       * <code>int32 utc_offset_min = 1;</code>
       */
      public Builder clearUtcOffsetMin() {
        
        utcOffsetMin_ = 0;
        onChanged();
        return this;
      }

      private int year_ ;
      /**
       * <code>int32 year = 2;</code>
       */
      public int getYear() {
        return year_;
      }
      /**
       * <code>int32 year = 2;</code>
       */
      public Builder setYear(int value) {
        
        year_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>int32 year = 2;</code>
       */
      public Builder clearYear() {
        
        year_ = 0;
        onChanged();
        return this;
      }

      private int month_ ;
      /**
       * <code>int32 month = 3;</code>
       */
      public int getMonth() {
        return month_;
      }
      /**
       * <code>int32 month = 3;</code>
       */
      public Builder setMonth(int value) {
        
        month_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>int32 month = 3;</code>
       */
      public Builder clearMonth() {
        
        month_ = 0;
        onChanged();
        return this;
      }

      private int day_ ;
      /**
       * <code>int32 day = 4;</code>
       */
      public int getDay() {
        return day_;
      }
      /**
       * <code>int32 day = 4;</code>
       */
      public Builder setDay(int value) {
        
        day_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>int32 day = 4;</code>
       */
      public Builder clearDay() {
        
        day_ = 0;
        onChanged();
        return this;
      }

      private int hour_ ;
      /**
       * <code>int32 hour = 5;</code>
       */
      public int getHour() {
        return hour_;
      }
      /**
       * <code>int32 hour = 5;</code>
       */
      public Builder setHour(int value) {
        
        hour_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>int32 hour = 5;</code>
       */
      public Builder clearHour() {
        
        hour_ = 0;
        onChanged();
        return this;
      }

      private int minute_ ;
      /**
       * <code>int32 minute = 6;</code>
       */
      public int getMinute() {
        return minute_;
      }
      /**
       * <code>int32 minute = 6;</code>
       */
      public Builder setMinute(int value) {
        
        minute_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>int32 minute = 6;</code>
       */
      public Builder clearMinute() {
        
        minute_ = 0;
        onChanged();
        return this;
      }

      private int second_ ;
      /**
       * <code>int32 second = 7;</code>
       */
      public int getSecond() {
        return second_;
      }
      /**
       * <code>int32 second = 7;</code>
       */
      public Builder setSecond(int value) {
        
        second_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>int32 second = 7;</code>
       */
      public Builder clearSecond() {
        
        second_ = 0;
        onChanged();
        return this;
      }

      private int millisecond_ ;
      /**
       * <code>int32 millisecond = 8;</code>
       */
      public int getMillisecond() {
        return millisecond_;
      }
      /**
       * <code>int32 millisecond = 8;</code>
       */
      public Builder setMillisecond(int value) {
        
        millisecond_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>int32 millisecond = 8;</code>
       */
      public Builder clearMillisecond() {
        
        millisecond_ = 0;
        onChanged();
        return this;
      }

      private boolean dateOnly_ ;
      /**
       * <code>bool date_only = 9;</code>
       */
      public boolean getDateOnly() {
        return dateOnly_;
      }
      /**
       * <code>bool date_only = 9;</code>
       */
      public Builder setDateOnly(boolean value) {
        
        dateOnly_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>bool date_only = 9;</code>
       */
      public Builder clearDateOnly() {
        
        dateOnly_ = false;
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:aif.kaist.DateTime)
    }

    // @@protoc_insertion_point(class_scope:aif.kaist.DateTime)
    private static final aif.kaist.iclab.protos.DateProtos.DateTime DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new aif.kaist.iclab.protos.DateProtos.DateTime();
    }

    public static aif.kaist.iclab.protos.DateProtos.DateTime getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<DateTime>
        PARSER = new com.google.protobuf.AbstractParser<DateTime>() {
      @java.lang.Override
      public DateTime parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new DateTime(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<DateTime> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<DateTime> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public aif.kaist.iclab.protos.DateProtos.DateTime getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_aif_kaist_DateTime_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_aif_kaist_DateTime_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\ndate.proto\022\taif.kaist\"\242\001\n\010DateTime\022\026\n\016" +
      "utc_offset_min\030\001 \001(\005\022\014\n\004year\030\002 \001(\005\022\r\n\005mo" +
      "nth\030\003 \001(\005\022\013\n\003day\030\004 \001(\005\022\014\n\004hour\030\005 \001(\005\022\016\n\006" +
      "minute\030\006 \001(\005\022\016\n\006second\030\007 \001(\005\022\023\n\013millisec" +
      "ond\030\010 \001(\005\022\021\n\tdate_only\030\t \001(\010B$\n\026aif.kais" +
      "t.iclab.protosB\nDateProtosb\006proto3"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
        new com.google.protobuf.Descriptors.FileDescriptor.    InternalDescriptorAssigner() {
          public com.google.protobuf.ExtensionRegistry assignDescriptors(
              com.google.protobuf.Descriptors.FileDescriptor root) {
            descriptor = root;
            return null;
          }
        };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        }, assigner);
    internal_static_aif_kaist_DateTime_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_aif_kaist_DateTime_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_aif_kaist_DateTime_descriptor,
        new java.lang.String[] { "UtcOffsetMin", "Year", "Month", "Day", "Hour", "Minute", "Second", "Millisecond", "DateOnly", });
  }

  // @@protoc_insertion_point(outer_class_scope)
}
